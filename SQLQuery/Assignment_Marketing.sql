--Q1. How many transactions were completed during each marketing campaign?
USE marketing;
SELECT 
    mc.campaign_id,
    mc.campaign_name,
    COUNT(t.transaction_id) AS transactions_count
FROM 
    marketing_campaigns mc
LEFT JOIN 
    transactions t
ON 
    mc.product_id = t.product_id
WHERE
    t.purchase_date BETWEEN mc.start_date AND mc.end_date
GROUP BY 
    mc.campaign_id, mc.campaign_name;

--2. Which product had the highest sales quantity? 
SELECT TOP 1
    sc.product_id, 
    sc.product_name, 
    SUM(t.quantity) AS total_quantity
FROM 
    sustainable_clothing sc
JOIN 
    transactions t
ON 
    sc.product_id = t.product_id
GROUP BY 
    sc.product_id, sc.product_name
ORDER BY 
    total_quantity DESC;

--3. What is the total revenue generated from each marketing campaign?
SELECT  
    mc.campaign_id,
    mc.campaign_name,
    SUM(t.quantity * sc.price) AS total_revenue
FROM 
    marketing_campaigns mc
JOIN 
    transactions t
ON 
    mc.product_id = t.product_id
JOIN 
    sustainable_clothing sc
ON 
    t.product_id = sc.product_id
WHERE 
    t.purchase_date BETWEEN mc.start_date AND mc.end_date
GROUP BY 
    mc.campaign_id, mc.campaign_name
ORDER BY 
	total_revenue DESC;

--4. What is the top-selling product category based on the total revenue generated?
SELECT TOP 1
    sc.category,
    SUM(t.quantity * sc.price) AS total_revenue
FROM 
    transactions t
JOIN 
    sustainable_clothing sc
ON 
    t.product_id = sc.product_id
GROUP BY 
    sc.category
ORDER BY 
    total_revenue DESC;

--5. Which products had a higher quantity sold compared to the average quantity sold?

DECLARE @avg_quantity INT;

SET @avg_quantity = (
    SELECT AVG(quantity) 
    FROM transactions
);

SELECT
    sc.product_id,
    sc.product_name,
    SUM(t.quantity) AS total_quantity,
    @avg_quantity AS avg_quantity
FROM
    sustainable_clothing sc
JOIN
    transactions t
ON
    sc.product_id = t.product_id
GROUP BY
    sc.product_id, sc.product_name
HAVING
    SUM(t.quantity) > @avg_quantity
ORDER BY
    total_quantity DESC;
--6. What is the average revenue generated per day during the marketing campaigns?




--7. What is the percentage contribution of each product to the total revenue?
DECLARE @total_revenue DECIMAL(12, 2);

SELECT @total_revenue = SUM(t.quantity * sc.price)
FROM transactions t
JOIN sustainable_clothing sc ON t.product_id = sc.product_id;

SELECT
    sc.product_id,
    sc.product_name,
    SUM(t.quantity * sc.price) AS product_revenue,
    @total_revenue AS total_revenue,
    100 * SUM(t.quantity * sc.price) / @total_revenue AS percentage_contribution
FROM
    sustainable_clothing sc
JOIN
    transactions t ON sc.product_id = t.product_id
GROUP BY
    sc.product_id, sc.product_name
ORDER BY
    product_revenue DESC;

 --8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns
 --9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns
--10. Rank the products by their average daily quantity sold
SELECT 
    sc.product_id,
    sc.product_name,
    AVG(t.quantity) / COUNT(DISTINCT t.purchase_date) AS avg_daily_quantity_sold,
    DENSE_RANK() OVER (ORDER BY AVG(t.quantity) / COUNT(t.purchase_date) DESC) AS Ranking
FROM transactions t
JOIN sustainable_clothing sc ON t.product_id = sc.product_id
GROUP BY sc.product_id, sc.product_name
ORDER BY Ranking;

-- Calculate the average daily quantity sold for each product and rank them
WITH DailyQuantity AS (
    SELECT
        s.beverage_id,
        SUM(s.quantity) AS total_quantity,
        COUNT(DISTINCT s.transaction_date) AS num_days
    FROM
        sales s
    GROUP BY
        s.beverage_id
),
AvgDailyQuantity AS (
    SELECT
        b.beverage_id,
        b.beverage_name,
        dq.total_quantity / dq.num_days AS avg_daily_quantity_sold
    FROM
        DailyQuantity dq
    JOIN
        beverages b ON dq.beverage_id = b.beverage_id
)
SELECT
    b.beverage_id,
    b.beverage_name,
    a.avg_daily_quantity_sold,
    DENSE_RANK() OVER (ORDER BY a.avg_daily_quantity_sold DESC) AS rank
FROM
    AvgDailyQuantity a
JOIN
    beverages b ON a.beverage_id = b.beverage_id
ORDER BY
    rank;
